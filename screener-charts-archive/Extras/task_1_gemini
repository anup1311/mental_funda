Screener Extension: React UI Integration Guide (for Cursor IDE)
This guide provides all the necessary code and steps to integrate the new React-based UI (screener-extension-ui) into your existing screener-charts Chrome extension.

Goal: Replace the current UI of the extension with the new React UI, making it ready for testing.

Instructions for Applying Changes in Cursor IDE:
Open Project: Open your main screener-charts project folder in Cursor.

File by File: For each file listed below:

Navigate to the specified file path in your project explorer within Cursor.

If the file exists, select all its current content and delete it.

Copy the entire code block provided in this guide for that file.

Paste the copied code into the corresponding file in Cursor.

Save the file.

Build React UI: After updating the files, you'll need to build the React UI and copy its assets.

Modify main.tsx: This is a critical step that requires adapting your existing React app's entry point. Instructions are provided in a dedicated section.

File 1: screener-charts/screener-extension-ui/next.config.mjs
Action: Replace the content of this file.

/** @type {import('next').NextConfig} */
const nextConfig = {
  // React Strict Mode is good for development, but can cause double renders.
  // You might want to set this to false if you encounter issues in the extension,
  // though it's generally recommended to keep it true and fix any underlying issues.
  reactStrictMode: true,

  // Configure Next.js to output a static export.
  // This will create an 'out' directory with HTML, CSS, and JS files
  // that can be bundled with your Chrome extension.
  output: 'export',

  // Optional: If your extension has a base path, configure it here.
  // For example, if you serve assets from 'chrome-extension://<ID>/react-app/',
  // you might set basePath: '/react-app'.
  // For simplicity, we'll assume no base path for now and handle paths in the manifest.
  // basePath: '/react-ui-assets', // Example, adjust if needed

  // If you are using 'next/image', you might need to make it unoptimized for static export
  // as the default loader won't work in a chrome-extension:// context without a custom loader.
  images: {
    unoptimized: true,
  },

  // Transpile specific packages if needed (usually for monorepos or specific dependencies)
  // transpilePackages: ['some-package'],
};

export default nextConfig;

File 2: screener-charts/manifest.json
Action: Replace the content of this file.

{
  "manifest_version": 3,
  "name": "Screener Charts & Analysis Extension",
  "version": "1.0.1",
  "description": "Enhances Screener.in with advanced charts, LLM analysis, and improved watchlist functionality.",
  "permissions": [
    "storage",
    "activeTab",
    "scripting",
    "alarms",
    "webRequest"
  ],
  "host_permissions": [
    "[https://www.screener.in/](https://www.screener.in/)*",
    "[https://charts.screener.in/](https://charts.screener.in/)*"
  ],
  "background": {
    "service_worker": "background.js",
    "type": "module"
  },
  "content_scripts": [
    {
      "matches": ["[https://www.screener.in/company/](https://www.screener.in/company/)*", "[https://www.screener.in/screens/](https://www.screener.in/screens/)*", "[https://www.screener.in/watchlist/](https://www.screener.in/watchlist/)*"],
      "js": ["content.js"],
      "css": [
        "styles.css"
      ],
      "run_at": "document_idle"
    }
  ],
  "action": {
    "default_popup": "popup/popup.html",
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    }
  },
  "options_page": "options.html",
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png"
  },
  "web_accessible_resources": [
    {
      "resources": [
        "react-ui-assets/static/css/*",     aneu
        "react-ui-assets/static/chunks/*", 
        "react-ui-assets/static/media/*",  
        "icons/*"                          
      ],
      "matches": ["[https://www.screener.in/](https://www.screener.in/)*"]
    }
  ],
  "commands": {
    "_execute_action": {
      "suggested_key": {
        "default": "Ctrl+Shift+S",
        "mac": "Command+Shift+S"
      },
      "description": "Open Screener Extension Popup"
    }
  }
}

File 3: screener-charts/content.js
Action: Replace the content of this file.

// screener-charts/content.js
console.log("Screener Extension: Content Script Loaded");

let screenerReactRoot = null;
let shadowRoot = null;

async function injectReactApp() {
  try {
    if (document.getElementById('screener-extension-react-host')) {
      console.log("Screener Extension: React app host already exists.");
      return;
    }

    const hostElement = document.createElement('div');
    hostElement.id = 'screener-extension-react-host';
    // Optional: Add styles for positioning the host element if needed
    // hostElement.style.position = 'fixed'; /* or 'absolute' */
    // hostElement.style.top = '10px';
    // hostElement.style.right = '10px';
    // hostElement.style.zIndex = '2147483647'; // Max z-index
    document.body.appendChild(hostElement);

    shadowRoot = hostElement.attachShadow({ mode: 'open' });

    screenerReactRoot = document.createElement('div');
    screenerReactRoot.id = 'screener-react-root';
    shadowRoot.appendChild(screenerReactRoot);

    // IMPORTANT: Update these paths if your Next.js build output structure is different.
    // These paths assume Next.js outputs CSS to `_next/static/css/` and JS chunks to `_next/static/chunks/`.
    // After building screener-extension-ui and copying to react-ui-assets, the paths would be:
    // react-ui-assets/_next/static/css/[name]-[hash].css
    // react-ui-assets/_next/static/chunks/[name]-[hash].js

    // Dynamically find the main CSS and JS files from the manifest or by a known pattern
    // For simplicity, assuming a known main CSS and JS bundle name or pattern.
    // You WILL LIKELY NEED TO ADJUST THESE PATHS after inspecting your `screener-extension-ui/out/_next/static` folder.
    const mainCssPattern = /react-ui-assets\/static\/css\/main\..*\.css/; // Example pattern
    const mainJsPattern = /react-ui-assets\/static\/chunks\/main\..*\.js/;   // Example pattern for a main chunk
    const appJsPattern = /react-ui-assets\/static\/chunks\/app\/layout\..*\.js/; // Example for Next.js 13+ app router entry

    // Find actual CSS file (Next.js often includes a hash in the filename)
    // This is a simplified way; a more robust method would be to parse the asset manifest if Next.js generates one.
    let cssPath = chrome.runtime.getURL('react-ui-assets/static/css/main.css'); // Placeholder - UPDATE THIS
    // You might need to list all files in web_accessible_resources and find the correct one,
    // or hardcode the hashed name after each build if it's stable enough for development.
    // For now, we'll assume you'll update this manually or create a more robust loader.

    // Find actual JS file
    let scriptPath = chrome.runtime.getURL('react-ui-assets/static/chunks/main.js'); // Placeholder - UPDATE THIS

    // Try to find the files based on manifest entries (if more specific)
    const manifest = chrome.runtime.getManifest();
    const war = manifest.web_accessible_resources;
    if (war && war.length > 0) {
        const resources = war[0].resources;
        const cssFile = resources.find(r => r.includes('static/css/') && r.endsWith('.css'));
        const jsFile = resources.find(r => r.includes('static/chunks/main') && r.endsWith('.js')) || // common main chunk
                       resources.find(r => r.includes('static/chunks/pages/_app') && r.endsWith('.js')) || // older pages router
                       resources.find(r => r.includes('static/chunks/app/layout') && r.endsWith('.js')); // newer app router entry

        if (cssFile) cssPath = chrome.runtime.getURL(cssFile);
        if (jsFile) scriptPath = chrome.runtime.getURL(jsFile);
    }
    
    console.log("Attempting to load CSS from:", cssPath);
    console.log("Attempting to load JS from:", scriptPath);


    const styleElement = document.createElement('link');
    styleElement.setAttribute('rel', 'stylesheet');
    styleElement.setAttribute('href', cssPath);
    styleElement.onload = () => console.log("Screener Extension: React app CSS loaded.");
    styleElement.onerror = () => console.error("Screener Extension: Failed to load React app CSS from:", cssPath);
    shadowRoot.appendChild(styleElement);

    // Pass the shadow root to the React app via a global variable or a custom event
    // This allows the React app to mount itself inside the shadow DOM.
    window.screenerExtensionShadowRoot = shadowRoot;
    window.screenerExtensionMountElementId = 'screener-react-root';


    const scriptElement = document.createElement('script');
    scriptElement.src = scriptPath;
    scriptElement.type = 'module';
    scriptElement.onload = () => {
      console.log("Screener Extension: React app script loaded.");
      // The React app's main.tsx should now be able to find window.screenerExtensionShadowRoot
      // and window.screenerExtensionMountElementId to render itself.
    };
    scriptElement.onerror = () => {
      console.error("Screener Extension: Failed to load React app script from:", scriptPath);
    };
    document.head.appendChild(scriptElement); // Load script in head

    console.log("Screener Extension: React app injection sequence initiated.");

  } catch (error) {
    console.error("Screener Extension: Error injecting React app:", error);
  }
}

function main() {
  console.log("Screener Extension: main() called on", window.location.href);
  injectReactApp();

  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log("Content script received message:", request);
    if (request.from === "react_ui") {
        if (request.action === "getInitialData") {
            // Replace with actual data extraction logic
            sendResponse({ success: true, data: { companyName: "Extracted Company Name", pageUrl: window.location.href } });
            return true; 
        }
        // Handle other messages from React UI to content script
    }
    return false;
  });
}

if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", main);
} else {
  main();
}

File 4: screener-charts/popup/popup.html
Action: Replace the content of this file.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Screener Extension Popup</title>
    <style>
        body {
            width: 400px;
            min-height: 300px;
            margin: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        }
        #popup-react-root {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        #loading-popup {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100px;
            color: #555;
        }
    </style>
</head>
<body>
    <div id="popup-react-root">
        <div id="loading-popup">Loading Popup...</div>
    </div>
    <script src="popup.js"></script>
</body>
</html>

File 5: screener-charts/popup/popup.js
Action: Replace the content of this file.

// screener-charts/popup/popup.js
console.log("Screener Extension: popup.js loaded");

function mountReactPopup() {
    const popupRootElement = document.getElementById('popup-react-root');
    if (!popupRootElement) {
        console.error("Screener Extension: Popup React root element not found.");
        return;
    }

    const loadingMessage = document.getElementById('loading-popup');
    if (loadingMessage) {
        loadingMessage.remove();
    }
    
    // Similar to content.js, you'll need to ensure correct paths to your React assets
    // These are placeholders and likely need adjustment based on your build output.
    let cssPath = chrome.runtime.getURL('react-ui-assets/static/css/main.css'); // Placeholder - UPDATE THIS
    let scriptPath = chrome.runtime.getURL('react-ui-assets/static/chunks/main.js'); // Placeholder - UPDATE THIS

    const manifest = chrome.runtime.getManifest();
    const war = manifest.web_accessible_resources;
     if (war && war.length > 0) {
        const resources = war[0].resources; // Assuming first entry is relevant
        const cssFile = resources.find(r => r.includes('static/css/') && r.endsWith('.css'));
        // For popup/options, it's often the same main JS bundle
        const jsFile = resources.find(r => r.includes('static/chunks/main') && r.endsWith('.js')) ||
                       resources.find(r => r.includes('static/chunks/pages/_app') && r.endsWith('.js')) ||
                       resources.find(r => r.includes('static/chunks/app/layout') && r.endsWith('.js'));


        if (cssFile) cssPath = chrome.runtime.getURL(cssFile);
        if (jsFile) scriptPath = chrome.runtime.getURL(jsFile);
    }

    console.log("Attempting to load CSS for popup from:", cssPath);
    console.log("Attempting to load JS for popup from:", scriptPath);

    const styleElement = document.createElement('link');
    styleElement.setAttribute('rel', 'stylesheet');
    styleElement.setAttribute('href', cssPath);
    document.head.appendChild(styleElement);

    // Pass context to React app
    window.screenerExtensionContext = "popup";
    window.screenerExtensionMountElementId = "popup-react-root";

    const scriptElement = document.createElement('script');
    scriptElement.src = scriptPath;
    scriptElement.type = 'module';
    scriptElement.onload = () => {
        console.log("Screener Extension: Popup React script loaded.");
        // React app's main.tsx should detect context and render WatchlistPopup
    };
    scriptElement.onerror = () => {
        console.error("Screener Extension: Failed to load Popup React script from:", scriptPath);
        if(popupRootElement) {
            popupRootElement.innerHTML = "<p style='color:red; padding:10px;'>Error loading popup UI. Check console.</p>";
        }
    };
    document.body.appendChild(scriptElement);
}

document.addEventListener('DOMContentLoaded', () => {
    console.log("Screener Extension: Popup DOMContentLoaded.");
    mountReactPopup();
});

File 6: screener-charts/options.html
Action: Replace the content of this file.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Screener Extension Options</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            padding: 20px;
            min-width: 500px;
        }
        #options-react-root {
            width: 100%;
        }
        #loading-options {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100px;
            color: #555;
        }
    </style>
</head>
<body>
    <h1>Screener Extension Settings</h1>
    <div id="options-react-root">
        <div id="loading-options">Loading Settings UI...</div>
    </div>
    <script src="options.js"></script>
</body>
</html>

File 7: screener-charts/options.js
Action: Replace the content of this file.

// screener-charts/options.js
console.log("Screener Extension: options.js loaded");

function mountReactOptionsPage() {
    const optionsRootElement = document.getElementById('options-react-root');
    if (!optionsRootElement) {
        console.error("Screener Extension: Options React root element not found.");
        return;
    }

    const loadingMessage = document.getElementById('loading-options');
    if (loadingMessage) {
        loadingMessage.remove();
    }

    let cssPath = chrome.runtime.getURL('react-ui-assets/static/css/main.css'); // Placeholder - UPDATE THIS
    let scriptPath = chrome.runtime.getURL('react-ui-assets/static/chunks/main.js'); // Placeholder - UPDATE THIS
    
    const manifest = chrome.runtime.getManifest();
    const war = manifest.web_accessible_resources;
    if (war && war.length > 0) {
        const resources = war[0].resources; // Assuming first entry is relevant
        const cssFile = resources.find(r => r.includes('static/css/') && r.endsWith('.css'));
        const jsFile = resources.find(r => r.includes('static/chunks/main') && r.endsWith('.js')) ||
                       resources.find(r => r.includes('static/chunks/pages/_app') && r.endsWith('.js')) ||
                       resources.find(r => r.includes('static/chunks/app/layout') && r.endsWith('.js'));

        if (cssFile) cssPath = chrome.runtime.getURL(cssFile);
        if (jsFile) scriptPath = chrome.runtime.getURL(jsFile);
    }

    console.log("Attempting to load CSS for options from:", cssPath);
    console.log("Attempting to load JS for options from:", scriptPath);

    const styleElement = document.createElement('link');
    styleElement.setAttribute('rel', 'stylesheet');
    styleElement.setAttribute('href', cssPath);
    document.head.appendChild(styleElement);

    // Pass context to React app
    window.screenerExtensionContext = "options";
    window.screenerExtensionMountElementId = "options-react-root";

    const scriptElement = document.createElement('script');
    scriptElement.src = scriptPath;
    scriptElement.type = 'module';
    scriptElement.onload = () => {
        console.log("Screener Extension: Options React script loaded.");
        // React app's main.tsx should detect context and render OptionsPage
    };
    scriptElement.onerror = () => {
        console.error("Screener Extension: Failed to load Options React script from:", scriptPath);
        if(optionsRootElement) {
            optionsRootElement.innerHTML = "<p style='color:red; padding:10px;'>Error loading settings UI. Check console.</p>";
        }
    };
    document.body.appendChild(scriptElement);
}

document.addEventListener('DOMContentLoaded', () => {
    console.log("Screener Extension: Options DOMContentLoaded.");
    mountReactOptionsPage();
});

File 8: screener-charts/package.json (Root of your extension)
Action: Replace the content of this file.

{
  "name": "screener-charts-extension",
  "version": "1.0.1",
  "description": "Chrome extension for Screener.in with React UI",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build:ui": "cd screener-extension-ui && pnpm install && pnpm build && cd ..",
    "copy:ui-assets": "echo 'Copying React UI assets...' && rm -rf ./react-ui-assets && mkdir -p ./react-ui-assets && cp -R ./screener-extension-ui/out/* ./react-ui-assets/ && echo 'React UI assets copied. IMPORTANT: Verify paths in manifest.json and .js files if Next.js output structure changes (e.g., _next folder).'",
    "build:extension": "npm run build:ui && npm run copy:ui-assets && echo 'Extension assets prepared. Now package the extension folder for Chrome.'",
    "package": "npm run build:extension && echo 'Build complete. Now zip the contents of the screener-charts directory (excluding node_modules, .git, screener-extension-ui, etc.) for submission.' && zip -r screener-extension.zip . -x 'screener-extension-ui/*' -x 'node_modules/*' -x '.git/*' -x '*.zip' -x 'react-ui-assets/README.md' -x 'react-ui-assets/.DS_Store'"
  },
  "keywords": [
    "chrome-extension",
    "screener.in",
    "react"
  ],
  "author": "Your Name",
  "license": "MIT",
  "devDependencies": {
    "zip-cli": "^0.0.1" 
  }
}

Note: You might need to install zip-cli globally or locally: npm install -D zip-cli in the screener-charts directory if you use the npm run package script.

Critical Step: Modifying screener-charts/screener-extension-ui/main.tsx (or your React App's Entry Point)
This is the most crucial part that requires adapting your existing React code. The goal is to make your React application aware of the context it's running in (content script, popup, or options page) and render the correct component into the appropriate DOM element (potentially within a Shadow DOM).

I cannot provide the exact code for main.tsx as it depends on your current file structure and components. However, here's what it needs to do:

// Conceptual structure for screener-charts/screener-extension-ui/main.tsx

import React from 'react';
import ReactDOM from 'react-dom/client';

// Import your main components
import ScreenerExtension from './components/screener-extension'; // For content script
import WatchlistPopup from './components/watchlist-popup';     // For popup
// import OptionsPage from './components/options-page';       // You'll need to create this

// Import global styles if not handled by individual components or Next.js _app.tsx
// import './styles/globals.css'; // Or your main stylesheet entry
// import './styles/extension.css';


// Component to handle settings for the options page
const OptionsPage = () => {
  // Basic placeholder - implement your actual options UI here
  // Use chrome.storage.sync.get and chrome.storage.sync.set for settings
  const [apiKey, setApiKey] = React.useState('');

  React.useEffect(() => {
    chrome.storage.sync.get(['apiKey'], (result) => {
      if (result.apiKey) {
        setApiKey(result.apiKey);
      }
    });
  }, []);

  const handleSave = () => {
    chrome.storage.sync.set({ apiKey }, () => {
      console.log('API Key saved');
      // Optionally, show a success message
    });
  };

  return (
    <div style={{ padding: '20px', fontFamily: 'sans-serif' }}>
      <h2>Extension Settings</h2>
      <div>
        <label htmlFor="apiKey" style={{ marginRight: '10px' }}>API Key:</label>
        <input 
          type="text" 
          id="apiKey" 
          value={apiKey} 
          onChange={(e) => setApiKey(e.target.value)} 
          style={{ padding: '5px', marginRight: '10px', width: '300px' }}
        />
      </div>
      <button onClick={handleSave} style={{ marginTop: '10px', padding: '8px 15px' }}>
        Save Settings
      </button>
    </div>
  );
};


const init = () => {
  // These global variables are set by content.js, popup.js, or options.js
  const context = window.screenerExtensionContext;
  const mountElementId = window.screenerExtensionMountElementId;
  const shadowRoot = window.screenerExtensionShadowRoot; // Only for content script

  let targetElement = null;

  if (context === 'content_script' && shadowRoot) {
    targetElement = shadowRoot.getElementById(mountElementId);
  } else if (mountElementId) {
    targetElement = document.getElementById(mountElementId);
  }

  if (targetElement) {
    const root = ReactDOM.createRoot(targetElement);
    let AppComponent;

    switch (context) {
      case 'content_script':
        AppComponent = ScreenerExtension;
        // Pass initial data if needed, e.g., by having content.js set it on window
        // const initialData = window.screenerContentScriptInitialData;
        // root.render(<React.StrictMode><AppComponent initialData={initialData} /></React.StrictMode>);
        root.render(<React.StrictMode><ScreenerExtension /></React.StrictMode>);
        break;
      case 'popup':
        AppComponent = WatchlistPopup;
        root.render(<React.StrictMode><WatchlistPopup /></React.StrictMode>);
        break;
      case 'options':
        AppComponent = OptionsPage; // Use the OptionsPage component you create
        root.render(<React.StrictMode><OptionsPage /></React.StrictMode>);
        break;
      default:
        console.error('Screener Extension: Unknown context or target element not found for React app.');
        return;
    }
    console.log(`Screener Extension: React app initialized in context "${context}"`);
  } else {
    console.error('Screener Extension: Target element for React app not found. Context:', context, 'ID:', mountElementId);
  }
};

// Delay initialization slightly to ensure host page/scripts are ready
// and global variables are set.
if (document.readyState === 'complete') {
  init();
} else {
  window.addEventListener('load', init);
}


How to use Cursor AI for main.tsx:

Open your existing screener-charts/screener-extension-ui/main.tsx (or your app's actual entry point, like app/page.tsx or app/layout.tsx if using Next.js App Router and you want to adapt that structure).

Select all the code in main.tsx.

Open Cursor's chat or "Edit with AI" feature.

Paste the conceptual main.tsx code provided above into the chat.

Prompt Cursor with something like:
*"Refactor my current main.tsx (or app/layout.tsx / app/page.tsx) to follow this new structure. It needs to:

Read window.screenerExtensionContext, window.screenerExtensionMountElementId, and window.screenerExtensionShadowRoot.

If the context is 'content_script', render the ScreenerExtension component into the element with mountElementId INSIDE the shadowRoot.

If the context is 'popup', render the WatchlistPopup component into the element with mountElementId.

If the context is 'options', render an OptionsPage component (you can create a basic placeholder for now) into the element with mountElementId.

Ensure all necessary imports for these components are present.

My main components are ScreenerExtension (located at ./components/screener-extension) and WatchlistPopup (located at ./components/watchlist-popup). Create a placeholder OptionsPage component within this main.tsx file for now."*

Review and apply Cursor's suggested changes. You might need to iterate.

Build and Asset Copying Steps (Manual or via npm run):
Navigate to screener-charts/screener-extension-ui:

cd screener-charts/screener-extension-ui

Install Dependencies (if not already done):

pnpm install # or npm install / yarn install

Build the React UI for Static Export:

pnpm build   # or npm run build / yarn build

This will create an out directory inside screener-charts/screener-extension-ui.

Navigate back to the root screener-charts directory:

cd .. 

Copy Built Assets (Manual):

Delete the screener-charts/react-ui-assets folder if it exists.

Create a new empty folder: mkdir screener-charts/react-ui-assets

Copy the contents of screener-charts/screener-extension-ui/out/ into screener-charts/react-ui-assets/.

Important: Your react-ui-assets folder should now contain subfolders like _next (which has static/css, static/chunks, etc.).

Verify Paths: After copying, inspect the structure inside react-ui-assets/_next/static/. Note the exact filenames (including hashes) for your main CSS and JS bundles. You MUST update the placeholder paths in content.js, popup.js, and options.js to these exact paths. The dynamic path finding logic added to these files is an attempt but might need fine-tuning based on your exact Next.js output. The web_accessible_resources in manifest.json uses wildcards which should generally cover hashed filenames, but the JS files loading them need the correct runtime URL.

Alternatively, use the npm script (from screener-charts directory):

npm run build:extension 

This script attempts to automate steps 1-5. Double-check its output and the react-ui-assets folder.

Testing the Extension:
Open Chrome and go to chrome://extensions.

Enable "Developer mode".

Click "Load unpacked".

Select your entire screener-charts folder.

If there are errors, check the extension's error log (link on the extension card) and the console of the content script (on a screener.in page), popup, and options page.

Common issues will be incorrect paths to JS/CSS assets or problems in how main.tsx mounts the components.

Pay close attention to console logs from content.js, popup.js, and options.js regarding asset loading.

Cursor Model Suggestions for Efficiency:
For simple file replacement: You don't strictly need AI. Just copy-paste the code into the correct files in Cursor.

For refactoring main.tsx (or your React app's entry point):

Start with Cursor's fastest/freest model available. This is often a GPT-3.5-turbo based model or a fine-tuned smaller model. Give it the clear instructions outlined above. It might be sufficient for this task.

If the free model struggles or produces incorrect/incomplete code for main.tsx: You might need to switch to a more capable model like GPT-4 (if available in your Cursor plan and you're willing to use quota). GPT-4 is generally better at understanding existing code and complex instructions.

Iterate: Don't expect a perfect result on the first try, especially for main.tsx. Review Cursor's output, identify issues, and provide feedback to the AI in follow-up prompts (e.g., "This part is incorrect, it should do X instead" or "You missed importing Y component").

Minimizing Compute:
The most compute-intensive part for the AI will be understanding and refactoring your existing main.tsx. By providing very specific instructions and the target structure (as in the conceptual main.tsx code), you guide the AI and reduce the "search space" for its solution, thus using compute more efficiently. For the other files, it's just copy-pasting, which is zero AI compute.

Good luck! This is a big step, so take it methodically.